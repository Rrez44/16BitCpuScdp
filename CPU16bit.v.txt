`timescale 1ns / 1ps
module Mbledhesi(
    input A,
    input B,
    input CIN,
    output Shuma,
    output COUT
    );
 
  
    assign Shuma = A ^ B ^ CIN;
    assign COUT = CIN & A | CIN & B | A & B;
endmodule

module mbledhesi16(
    input [15:0] A,
    input [15:0] B,
    output [15:0] REZ,
    input CarryOut
    );

    wire [14:0] COUT;
Mbledhesi mbledhesi0 (A[0], B[0], 1'b0, REZ[0], COUT[0]);
     
Mbledhesi mbledhesi1 (A[1], B[1], COUT[0], REZ[1], COUT[1]);
     
Mbledhesi mbledhesi2 (A[2], B[2], COUT[1], REZ[2], COUT[2]);
     
Mbledhesi mbledhesi3 (A[3], B[3], COUT[2], REZ[3], COUT[3]);
     
Mbledhesi mbledhesi4 (A[4], B[4], COUT[3], REZ[4], COUT[4]);
     
Mbledhesi mbledhesi5 (A[5], B[5], COUT[4], REZ[5], COUT[5]);
     
Mbledhesi mbledhesi6 (A[6], B[6], COUT[5], REZ[6], COUT[6]);
     
Mbledhesi mbledhesi7 (A[7], B[7], COUT[6], REZ[7], COUT[7]);
     
Mbledhesi mbledhesi8 (A[8], B[8], COUT[7], REZ[8], COUT[8]);
     
Mbledhesi mbledhesi9 (A[9], B[9], COUT[8], REZ[9], COUT[9]);
     
Mbledhesi mbledhesi10 (A[10], B[10], COUT[9], REZ[10], COUT[10]);
     
Mbledhesi mbledhesi11 (A[11], B[11], COUT[10], REZ[11], COUT[11]);
     
Mbledhesi mbledhesi12 (A[12], B[12], COUT[11], REZ[12], COUT[12]);
     
Mbledhesi mbledhesi13 (A[13], B[13], COUT[12], REZ[13], COUT[13]);
     
Mbledhesi mbledhesi14 (A[14], B[14], COUT[13], REZ[14], COUT[14]);
     
Mbledhesi mbledhesi15 (A[15], B[15], COUT[14], REZ[15], CarryOut);

    
    
    
endmodule








`timescale 1ns / 1ps
module mux2ne1(
    input Hyrja0,
    input Hyrja1,
    input S,
    output Dalja
    );
    
  

    assign Dalja = S ? Hyrja1 : Hyrja0;
endmodule
`timescale 1ns / 1ps
module mux4ne1(
    input Hyrja0, 
    input Hyrja1, 
    input Hyrja2, 
    input Hyrja3, 
    input [1:0] S,
    output Dalja
    );

    assign Dalja = S[1] ? (S[0] ? Hyrja3 : Hyrja2) : (S[0] ? Hyrja1 : Hyrja0);
    
endmodule
module mux6ne1(
    input Hyrja0, // AND
    input Hyrja1, // ADD
    input Hyrja2, // OR
    input Hyrja3, // XOR
    input Hyrja4, // SLTI
    input Hyrja5, // Unused
    input [2:0] S, // Selector
    output Dalja
);
   
    assign Dalja = (S == 3'b000) ? Hyrja0 : // AND
                   (S == 3'b100) ? Hyrja1 : // ADD
                   (S == 3'b010) ? Hyrja2 : // OR
                   (S == 3'b011) ? Hyrja3 : // XOR
                   (S == 3'b001) ? Hyrja4 : // SLTI
                   Hyrja5; // def
endmodule
`timescale 1ns / 1ps
module ALU1(
    input A,
    input B,
    input CIN,
    input AInvert,
    input BInvert,     
    input Less,
    input [2:0] Op,
    output Result,
    output CarryOut
    );
    
   wire JoA, JoB, mA, mB, dhe_teli, ose_teli, mb_teli,xor_teli,nan,slti_teli; 
   
   assign JoA = ~A;
   assign JoB = ~B;
   
   mux2ne1 muxA(A, JoA, AInvert, mA);
  
  
   mux2ne1 muxB(B, JoB, BInvert, mB);
   
   assign dhe_teli = mA & mB; 
   assign ose_teli = mA | mB;
   assign xor_teli = mA ^ mB;
   
   Mbledhesi m1(mA, mB, CIN, mb_teli, CarryOut);
   mux6ne1 MuxiKryesor(dhe_teli, mb_teli, ose_teli, xor_teli, slti_teli, nan, Op, Result);

    
    
endmodule
`timescale 1ns / 1ps
module ALU16(  // ALU16 ALU(readData1, mux_ALU, ALUCtrl[3], ALUCtrl[2], ALUCtrl[1:0], zerof, ALU_Out, overflow, carryout);
    input [15:0] A,
    input [15:0] B,
    input AInvert,
    input BNegate,
    input [2:0] Op,
    output Zero, 
    output Overflow,   
    output [15:0] Result,
    output CarryOut
    );
   
    wire [14:0] COUT;
    //LIDH 16 ALU 1-biteshe
  ALU1 ALU0(A[0], B[0], BNegate, AInvert, BNegate, Result[15], Op, Result[0], COUT[0]); // carryout 
  
    ALU1 ALU1(A[1], B[1], COUT[0], AInvert, BNegate, 0, Op, Result[1], COUT[1]);
    ALU1 ALU2(A[2], B[2], COUT[1], AInvert, BNegate, 0, Op, Result[2], COUT[2]);
    ALU1 ALU3(A[3], B[3], COUT[2], AInvert, BNegate, 0, Op, Result[3], COUT[3]);
    ALU1 ALU4(A[4], B[4], COUT[3], AInvert, BNegate, 0, Op, Result[4], COUT[4]);
    ALU1 ALU5(A[5], B[5], COUT[4], AInvert, BNegate, 0, Op, Result[5], COUT[5]);
    ALU1 ALU6(A[6], B[6], COUT[5], AInvert, BNegate, 0, Op, Result[6], COUT[6]);
    ALU1 ALU7(A[7], B[7], COUT[6], AInvert, BNegate, 0, Op, Result[7], COUT[7]);
    ALU1 ALU8(A[8], B[8], COUT[7], AInvert, BNegate, 0, Op, Result[8], COUT[8]);
    ALU1 ALU9(A[9], B[9], COUT[8], AInvert, BNegate, 0, Op, Result[9], COUT[9]);
    ALU1 ALU10(A[10], B[10], COUT[9], AInvert, BNegate, 0, Op, Result[10], COUT[10]);
    ALU1 ALU11(A[11], B[11], COUT[10], AInvert, BNegate, 0, Op, Result[11], COUT[11]);
    ALU1 ALU12(A[12], B[12], COUT[11], AInvert, BNegate, 0, Op, Result[12], COUT[12]);
    ALU1 ALU13(A[13], B[13], COUT[12], AInvert, BNegate, 0, Op, Result[13], COUT[13]);
    ALU1 ALU14(A[14], B[14], COUT[13], AInvert, BNegate, 0, Op, Result[14], COUT[14]);
    ALU1 ALU15(A[15], B[15], COUT[14], AInvert, BNegate, 0, Op, Result[15], CarryOut);
    
assign Zero = ~(Result[0] | Result[1] | 
                Result[2] | Result[3] | 
                Result[4] | Result[5] | 
                Result[6] | Result[7] | 
                Result[8] | Result[9] | 
                Result[10] | Result[11] | 
                Result[12] | Result[13] | 
                Result[14] | Result[15]); 

                    
assign Overflow = COUT[14] ^ CarryOut;
    
    
endmodule


module SLTI(
    input[15:0] rs, // A
    input[15:0] immediate, // mB
    output[15:0] rt // slti
    );
wire lsb;
assign lsb = (rs < immediate) ? 1 : 0;
  assign rt = {15'b0, lsb};

endmodule


module right_shift_barrel_shifter(
    input [15:0] data_in,   
    input [3:0] shamt,  
    output reg [15:0] data_out
);
always @(*) begin
    case(shamt)
        4'b0000: data_out = data_in;
        4'b0001: data_out = data_in >> 1;
        4'b0010: data_out = data_in >> 2;
        4'b0011: data_out = data_in >> 3;
        4'b0100: data_out = data_in >> 4;
        4'b0101: data_out = data_in >> 5;
        4'b0110: data_out = data_in >> 6;
        4'b0111: data_out = data_in >> 7;
        4'b1000: data_out = data_in >> 8;
        4'b1001: data_out = data_in >> 9;
        4'b1010: data_out = data_in >> 10;
        4'b1011: data_out = data_in >> 11;
        4'b1100: data_out = data_in >> 12;
        4'b1101: data_out = data_in >> 13;
        4'b1110: data_out = data_in >> 14;
        4'b1111: data_out = data_in >> 15;
        default: data_out = 16'b0;
    endcase
end

endmodule


module operation_Selector(
    input [15:0] A,
    input [15:0] B,
    input BNegate,
  	input Ainvert,
    input [2:0] ALUOp,
  	input [3:0]shamt,
    output Zero,
  	output [15:0] REZ,
    output Overflow, 
    output CarryOut
    );
   
    wire[15:0] operationrez;
    wire[15:0] slti_;
    wire[15:0] sll_;
    wire[15:0] sra_;
   
  ALU16 alu(A, B, Ainvert,BNegate, ALUOp, Zero, Overflow, operationrez, CarryOut);
   
  SLTI slti(A, B, slti_);
  left_shift_barrel_shifter sll(A, shamt, sll_);
  right_shift_barrel_shifter sra(A, shamt, sra_);

   
  muxOperator mux(operationrez, slti_, sll_,sra_, ALUOp, REZ);
   
endmodule

module muxOperator(
  input[15:0] Hyrja0, //ALU16
  input[15:0] Hyrja1, //SLTI
  input[15:0] Hyrja2, //SLL
  input[15:0] Hyrja3, //SRA
  input[2:0] S,
  output[15:0] Dalja
    );
   

assign Dalja = S[2] ? (S[1] ? (S[0] ? Hyrja3 : Hyrja2) : (S[0] ? Hyrja0 : Hyrja0)) : 
                       (S[1] ? (S[0] ? Hyrja0 : Hyrja0) : (S[0] ? Hyrja1 : Hyrja0));

                        
endmodule
// module slti(
//     input [15:0] A,
//     input [15:0] B,
//     output reg smaller
// );

// reg [15:0] difference;
// reg [15:0] mask;
// integer i;

// always @(A, B) begin
//     difference = A ^ B;  
//     mask = 16'h8000;  // Start with the most significant bit

//     if (difference == 0) begin
//         smaller = 0;  // Words are equal
//     end else begin
//         for (i = 15; i >= 0; i = i - 1) begin
//             if (difference & mask) begin 
//                 if (~(A & mask) & (B & mask))  
//                     smaller = 1;
//                 else
//                     smaller = 0;
//                 break;  // Found the first differing bit
//             end
//             mask = mask >> 1;  // Move to the next bit
//         end
//     end
// end

// endmodule
module left_shift_barrel_shifter(
    input [15:0] data_in,
    input [3:0] shamt,  
    output reg [15:0] data_out 
);
 
always @(*) begin
    case(shamt)
        4'b0000: data_out = data_in;
        4'b0001: data_out = data_in << 1;
        4'b0010: data_out = data_in << 2;
        4'b0011: data_out = data_in << 3;
        4'b0100: data_out = data_in << 4;
        4'b0101: data_out = data_in << 5;
        4'b0110: data_out = data_in << 6;
        4'b0111: data_out = data_in << 7;
        4'b1000: data_out = data_in << 8;
        4'b1001: data_out = data_in << 9;
        4'b1010: data_out = data_in << 10;
        4'b1011: data_out = data_in << 11;
        4'b1100: data_out = data_in << 12;
        4'b1101: data_out = data_in << 13;
        4'b1110: data_out = data_in << 14;
        4'b1111: data_out = data_in << 15;
        default: data_out = 16'b0;
    endcase
end

endmodule





`timescale 1ns / 1ps
module ALUControlUnit(
    input [1:0] AluOp,
    input [3:0] opcode,
    input [1:0] functionCode,
    output reg [3:0] ALUControl // Updated to 4 bits
);

always @(*) 
  begin
    case (AluOp)
        2'b00:// lw/sw - Addition
            ALUControl = 4'b0100; // 0100 for ADD
        2'b01:// beq - Subtraction
            ALUControl = 4'b1100; // 1100 for SUB
        2'b10: // Depends on function code
            case (functionCode)
                2'b00: ALUControl = (opcode == 4'b0000) ? 4'b0000 : // AND
                                    (opcode == 4'b0001) ? 4'b0100 : // ADD
                  					(opcode == 4'b0010) ? 4'b0110: // sll
                                    4'bxxxx; // Other operations
                2'b01: ALUControl = (opcode == 4'b0000) ? 4'b0010 : // OR
                  					(opcode == 4'b0001) ? 4'b1100 : // SUB
                  					(opcode == 4'b0010) ? 4'b0111: // sra
                                    4'bxxxx; // Other operations
                2'b10: ALUControl = 4'b0011; // XOR
                // ... Other function codes ...
            endcase
        2'b11: // Depends on opcode
            case (opcode)
                4'b1001: ALUControl = 4'b0100; // ADDI
                4'b1010: ALUControl = 4'b1100; // SUBI
                4'b1011: ALUControl = 4'b0001; // SLTI
                // ... Other opcodes ...
            endcase

    endcase
end

endmodule

`timescale 1ns / 1ps
module RegisterFile(
input wire[1:0] RS,
input wire[1:0] RT,
input wire[1:0] RD,
input wire[15:0] WriteData,
input wire RegWrite,
input wire Clock,
output wire[15:0] ReadRS,
output wire[15:0] ReadRT
    );
  reg[15:0] Registers[3:0];

//Reseto te gjithe regjistrat ne 0
integer i;
initial 
begin
  for(i=0;i<4;i=i+1)
    Registers[i]<= 16'd0; 
end

//Shkruaj ne regjiter
always @(posedge Clock)
begin
	Registers[RD] <= WriteData;
end
//lexo regjistrat ReadData1, ReadData2
assign ReadRS = Registers[RS];
assign ReadRT = Registers[RT];


endmodule


module InstructionMemory(
input wire[15:0] PCAddress,
output wire[15:0] Instruction);

  reg[7:0] instrMem[127:0];

initial
$readmemb("instructionMemory.mem", instrMem);

assign Instruction[15:8] = instrMem[PCAddress];
assign Instruction[7:0] = instrMem[PCAddress + 16'd1];


endmodule

`timescale 1ns / 1ps
module CU(
  input [3:0] OPCODE, //HYRJA NGA D_OUT_1
    output reg RegDst, //DALJET E CU, CU_OUT_x
    output reg Branch,
    output reg MemRead,
    output reg MemToReg,
    output reg[1:0] AluOp,
    output reg MemWrite,
    output reg AluSrc,
    output reg RegWrite
    );
    
    
always @ (OPCODE)
begin
case(OPCODE)
4'b0000: // and, or, xor
    begin
    RegDst = 1;
    AluSrc = 0;
    MemToReg = 0;
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    AluOp[1] = 1;
    AluOp[0] = 0;
    end
4'b0001: // add, sub
    begin
    RegDst = 1;
    AluSrc = 0;
    MemToReg = 0;
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    AluOp[1] = 1;
    AluOp[0] = 0;
    end 

4'b1100: //PER LW
    begin
    RegDst = 0;
    AluSrc = 1;
    MemToReg = 1;
    RegWrite = 1;
    MemRead = 1;
    MemWrite = 0;
    Branch = 0;
    AluOp[1] = 0;
    AluOp[0] = 0;
    end 
    
4'b1101: //PER SW
    begin
    RegDst = 1'bx;
    AluSrc = 1'b1;
    MemToReg = 1'bx;
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 1;
    Branch = 0;
    AluOp[1] = 0;
    AluOp[0] = 0;
    end 
    
4'b1111: //PER BEQ
    begin
    RegDst = 1'b0;
    AluSrc = 0;
    MemToReg = 1'b0;
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 0;
    Branch = 1;
    AluOp[1] = 0;
    AluOp[0] = 1;
    end 
4'b1001: //PER ADDI
    begin
    RegDst = 0;
    AluSrc = 1;
    MemToReg = 0;
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    AluOp[1] = 1;
    AluOp[0] = 1;
    end
  
4'b1010: // subi
  begin
    RegDst = 0;
    AluSrc = 1;
    MemToReg = 0;
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    AluOp[1] = 1;
    AluOp[0] = 1;
    end
 4'b1011: // slti
    begin
    RegDst = 0;
    AluSrc = 1;
    MemToReg = 0;
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    AluOp[1] = 1;
    AluOp[0] = 1;
    end
4'b0010: // sra , sll
    begin
    RegDst = 1;
    AluSrc = 0;
    MemToReg = 0;
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    AluOp[1] = 1;
    AluOp[0] = 0;
    end 
endcase
end
endmodule
                         


`timescale 1ns / 1ps
module dataMemory(
input wire[15:0] Address,
input wire[15:0] WriteData,
input wire MemWrite, 
input wire MemRead, 
input wire Clock, 
output wire[15:0] ReadData
);

reg[7:0] dataMem[0:127];

initial
$readmemb("dataMemory.mem", dataMem);

always@(posedge Clock)
begin
    if(MemWrite) 
        begin
            //bigEndian

          dataMem[Address + 10] <= WriteData[15:8];
          dataMem[Address + 11] <= WriteData[7:0];
           end
end

always@(negedge Clock)
begin
$writememb("dataMemory.mem", dataMem);
end

 
   
  assign ReadData[15:8] = dataMem[Address + 10];
  assign ReadData[7:0] = dataMem[Address + 11];




endmodule

`timescale 1ns / 1ps
module Datapath(
input Clock, //HYRJE NGA CPU - TELI CPU_IN_1
input RegDst, Branch, MemRead, 
MemWrite, RegWrite, MemToReg, ALUSrc, //HYRJET NGA CU - TELAT CU_OUT_x
input [1:0] ALUOp, //HYRJE NGA CU - TELAT CU_OUT_x
output [3:0] opcode //DALJE PER NE CU - TELI D_OUT_1
);

//SHIKO FOTO DATAPATH.PDF
reg[15:0] pc_initial; // Regjistri PC
  wire [15:0] pc_next, pc2, pcbeq; //TELAT: T1, T2, T3
  wire [15:0] instruction; //TELI T5
  wire [1:0] mux_regfile; //TELI T6
  wire[15:0] readData1, readData2, writeData, //TELAT T7-T9 
mux_ALU, ALU_Out, Zgjerimi, memToMux, //TELAT T10-T13
shifter1beq, branchAdderToMux, beqAddress; //TELAT T14-T18 
  wire[3:0] ALUCtrl; //TELI T19  // HETOJE RASTIN !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
wire zerof, overflow, carryout; // TEL AT T20-T22
wire andMuxBranch; //TELI T23

initial
begin
    pc_initial = 16'd10; //inicializimi fillesat i PC ne adresen 10
end

always@(posedge Clock)
begin
    pc_initial <= pcbeq; //azhurimi i PC ne cdo teh pozitiv me adresen e ardhshme
    
end

  //T2 - PC rritet per 2 per te gjitha instruksionet pervec BEQ, BNE, JUMP
//pc_adder adder_instance (
//  .A(pc_initial),      // Connect input_signal to the A input of pc_adder
//  .sum(adder_output)     // Connect adder_output to the sum output of pc_adder
//);
//         input [15:0] A,
//         input [15:0] B,
//         input cin,
//         output [15:0] sum,
//         output cout
  mbledhesi16 addCounter(pc_initial, 16'd2,pc2, 1'b0);
//1111-1111-1001-0001-0                    
//T14 - pergatitja e adreses per kercim ne BEQ (164 bit si MSB, 16 bit nga pjesa imediate, 2 bit shtyrje majtas (x4) 
  
assign shifter1beq = {{7{instruction[7]}}, instruction[7:0], 1'b0};  // rast per hetim !!!!!!!!!!!!!!!!!!!!!!
//T15 - pergatitja e adreses per kercim ne Jump, PC[31:28], 26 bit nga pjesa e poshtme e instruction[25:0], 2 bit shtyrje majtas (x4)  
// assign shifter2jump = {pc_initial[31:28], instruction[25:0], 2'b00};  

//Instr mem //inicializimi i IM (PC adresa hyrje, teli instruction dajle)
InstructionMemory IM(pc_initial, instruction); 

//T6 - Percaktimi nese RD eshte RD (te R-formati) apo RD = RT (te I-formati) - MUX M1 ne foto
assign mux_regfile = (RegDst == 1'b1) ? instruction[7:6] : instruction[9:8]; 

// T12 - Zgjerimi nga 16 ne 32 bit - 16 bit si MSB dhe pjesa e instruction[15:0] - S1 ne foto

assign Zgjerimi = {{8{instruction[7]}}, instruction[7:0]};  
//1111-1111-1111-1111 
//REGFILE
//inicializimi i RF(RS, RT, T6 (RD[RD=RD || RD=RT]), T9, CU_OUT_x, CPU_IN_1, T7, T8)
  RegisterFile RF(instruction[11:10], instruction[9:8], mux_regfile, writeData,RegWrite,Clock, readData1, readData2 ); 

// T10 - Percaktimi nese hyrja e MUX-it M2 para ALU eshte Regjstri 2 i RF apo vlera imediate e instruksionit 
assign mux_ALU = (ALUSrc == 1'b1) ? Zgjerimi : readData2; 

//inicializimi i ALU Control (CU_OUT_x, Function Code nga R-formati, Opcode, T19) - eshte shtuar ALUOp per I-format qe nuk eshte ne foto po kerkohet ne detyre 
ALUControlUnit AC(ALUOp, instruction[15:12], instruction[1:0], ALUCtrl); 

//inicializimi i ALU (T7, T10, T19[3], T19[2], T19[1:0], T20, T11, T21, T22)
operation_Selector ALU(readData1, mux_ALU, ALUCtrl[3] ,1'b0, ALUCtrl[2:0],instruction[5:2], zerof, ALU_Out, overflow, carryout);

//inicializimi i Data Memory (T11, T8, CU_OUT_x, CU_OUT_x, CPU_IN_1, T13) 
dataMemory DM(ALU_Out, readData2, MemWrite, MemRead, Clock, memToMux);

//T9 - Teli qe i dergon te dhenat nga MUX - M3 ne Regfile
assign writeData = (MemToReg == 1'b1) ? memToMux : ALU_Out;

//T23 - Teli qe del nga porta DHE ne pjesen e eperme te fotos (shikon nese plotesohet kushti per BEQ
assign andMuxBranch = zerof & Branch;

//T17, Teli qe mban adresen ne te cilen do te kercej programi kur kushti BEQ plotesohet
assign beqAddress = pc2 + shifter1beq; 

//T3 - Teli qe del nga Mux M4 ne foto qe kontrollon nese kemi BEQ apo PC+4
assign pcbeq = (andMuxBranch == 1'b1) ? beqAddress : pc2;

//Teli D_OUT_1 qe i dergohet CU
assign opcode = instruction[15:12];

endmodule



// duhet me ba mbledhsin 16 bitsh per beqadres

`timescale 1ns / 1ps
module CPU(input Clock);

//TELAT E BRENDSHEM TE CPU, SHIH CPU.PDF
  wire [3:0] opcode; //D_OUT_1
//CU_OUT_x
wire RegDst, Branch, MemRead, MemWrite, RegWrite, MemToReg, ALUSrc;
 wire [1:0] ALUOp;

//inicializimi i Datapath    
Datapath DP
(
Clock,
RegDst, Branch, MemRead, MemWrite, RegWrite, MemToReg, ALUSrc,
ALUOp,
opcode
);

//Inicializimi i Control Unit
CU ControlUnit(
opcode,
RegDst,  
Branch, 
MemRead, 
MemToReg,
ALUOp,
MemWrite, 
ALUSrc,
RegWrite
);

endmodule




///////////////////////// TESTIIIII I CPU ///////////////////////////////


`timescale 1ns / 1ps

module cpu_testbench;

    // Testbench Signals
    reg Clock;

    // Instantiate the CPU module
    CPU cpu_instance (
        .Clock(Clock)
    );

    // Clock Generation
    always begin
        #5 Clock = ~Clock; // Generate a clock with a period of 10 ns
    end

    // Testbench Initialization
    initial begin
      	$dumpfile("dump.vcd"); $dumpvars;
        // Initialize Signals
        Clock = 0; // Start with a low clock signal

        // Reset the CPU if necessary
        // ...

        // Load instructions into instruction memory if applicable
        // ...

        // Write initial values to registers or memory if needed
        // ...

        // Simulation duration
        #1000; // Run simulation for 1000 ns, adjust as necessary

        // Add more test cases and scenarios here

        // End simulation
        $finish;
    end

    // Optional: Add tasks or functions for specific tests
    // ...

endmodule